import streamlit as st
import pandas as pd
import numpy as np
import datetime
from sklearn.linear_model import LinearRegression

st.set_page_config(page_title="Smart Energy Match", layout="centered")

st.title("‚ö° Smart Energy Match ‚Äì AI –ü—Ä–æ–≥–Ω–æ–∑–∞ –∑–∞ –ü—Ä–æ–¥–∞–∂–±–∞ –Ω–∞ –ï–ª. –ï–Ω–µ—Ä–≥–∏—è")

st.markdown("""
–¢–æ–≤–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑–ø–æ–ª–∑–≤–∞ —Å–∏–º—É–ª–∏—Ä–∞–Ω–∏ –±–æ—Ä—Å–æ–≤–∏ —Ü–µ–Ω–∏ –∏ AI –∞–ª–≥–æ—Ä–∏—Ç—ä–º, –∑–∞ –¥–∞ —Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–∏ **–æ–ø—Ç–∏–º–∞–ª–µ–Ω –º–æ–º–µ–Ω—Ç –∑–∞ –ø—Ä–æ–¥–∞–∂–±–∞** –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–µ–Ω–µ—Ä–≥–∏—è, –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ—Ç —Ñ–æ—Ç–æ–≤–æ–ª—Ç–∞–∏—Ü–∏.
""")

# --- –í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏ –æ—Ç –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è ---
st.subheader("–í—ä–≤–µ–¥–∏ –¥–∞–Ω–Ω–∏ –∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ")
produced_kwh = st.number_input("–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –µ–ª. –µ–Ω–µ—Ä–≥–∏—è (kWh)", min_value=0.0, step=0.1)
battery_capacity = st.number_input("–°–≤–æ–±–æ–¥–µ–Ω –∫–∞–ø–∞—Ü–∏—Ç–µ—Ç –Ω–∞ –±–∞—Ç–µ—Ä–∏—è—Ç–∞ (kWh)", min_value=0.0, step=0.1)
start_time = st.time_input("–ù–∞—á–∞–ª–µ–Ω —á–∞—Å –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞—Ç–∞", value=datetime.time(8, 0))

# --- –ì–µ–Ω–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–Ω–∏ –±–æ—Ä—Å–æ–≤–∏ —Ü–µ–Ω–∏ ---
hours = pd.date_range(datetime.datetime.combine(datetime.date.today(), start_time), periods=12, freq='H')
base_price = 150 + np.random.randn(12) * 10  # —Å—Ä–µ–¥–Ω–∞ —Ü–µ–Ω–∞ ~150 –ª–≤/MWh —Å —à—É–º

# --- AI –º–æ–¥–µ–ª: –ø—Ä–æ—Å—Ç–∞ –ª–∏–Ω–µ–π–Ω–∞ —Ä–µ–≥—Ä–µ—Å–∏—è –∑–∞ —Ç—Ä–µ–Ω–¥ ---
X = np.array(range(len(hours))).reshape(-1, 1)
y = base_price
model = LinearRegression().fit(X, y)
predicted_prices = model.predict(X)

# --- –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º ---
data = pd.DataFrame({
    "–ß–∞—Å": hours.strftime('%H:%M'),
    "–ë–æ—Ä—Å–æ–≤–∞ —Ü–µ–Ω–∞ (–ª–≤/MWh)": base_price.round(2),
    "–ü—Ä–æ–≥–Ω–æ–∑–Ω–∞ —Ü–µ–Ω–∞ (AI)": predicted_prices.round(2)
})
data["–ü—Ä–µ–ø–æ—Ä—ä–∫–∞"] = np.where(predicted_prices > base_price, "–ó–∞–¥—Ä—ä–∂", "–ü—Ä–æ–¥–∞–π")

st.subheader("üìä –ü—Ä–æ–≥–Ω–æ–∑–µ–Ω –∞–Ω–∞–ª–∏–∑")
st.dataframe(data, use_container_width=True)

# --- –ì—Ä–∞—Ñ–∏–∫–∞ ---
st.line_chart(data.set_index("–ß–∞—Å")[["–ë–æ—Ä—Å–æ–≤–∞ —Ü–µ–Ω–∞ (–ª–≤/MWh)", "–ü—Ä–æ–≥–Ω–æ–∑–Ω–∞ —Ü–µ–Ω–∞ (AI)"]])

# --- –û–±—â —Å—ä–≤–µ—Ç ---
st.subheader("ü§ñ AI –°—ä–≤–µ—Ç")
recommendation = data["–ü—Ä–µ–ø–æ—Ä—ä–∫–∞"].value_counts().idxmax()
if recommendation == "–ó–∞–¥—Ä—ä–∂":
    st.success("AI –ø—Ä–µ–ø–æ—Ä—ä–∫–∞: –ò–∑—á–∞–∫–∞–π ‚Äì —Ü–µ–Ω–∏—Ç–µ —â–µ —Å–µ –ø–æ–∫–∞—á–∞—Ç –ø—Ä–µ–∑ —Å–ª–µ–¥–≤–∞—â–∏—Ç–µ —á–∞—Å–æ–≤–µ.")
else:
    st.warning("AI –ø—Ä–µ–ø–æ—Ä—ä–∫–∞: –ü—Ä–æ–¥–∞–π —Å–µ–≥–∞ ‚Äì –Ω–µ —Å–µ –æ—á–∞–∫–≤–∞ –ø–æ–≤–∏—à–µ–Ω–∏–µ –Ω–∞ —Ü–µ–Ω–∏—Ç–µ.")
